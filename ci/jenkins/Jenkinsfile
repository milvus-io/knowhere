#!/usr/bin/env groovy
@Library('mpl') _

String cron_timezone = "TZ=Asia/Shanghai"
String cron_string = BRANCH_NAME == "0.11.1" ? "30 0 * * * " : ""

pipeline {
    agent none
    triggers {
        cron """${cron_timezone}
            ${cron_string}"""
    }
    options {
        timestamps()
    }
    parameters{
        choice choices: ['Release', 'Debug'], description: 'Build Type', name: 'BUILD_TYPE'
        choice choices: ['False', 'True'], description: 'Is Manual Trigger Or Not', name: 'IS_MANUAL_TRIGGER_TYPE'
        string defaultValue: 'registry.zilliz.com', description: 'DOCKER REGISTRY URL', name: 'DOKCER_REGISTRY_URL', trim: true
        string defaultValue: 'ba070c98-c8cc-4f7c-b657-897715f359fc', description: 'DOCKER CREDENTIALS ID', name: 'DOCKER_CREDENTIALS_ID', trim: true
        string defaultValue: 'http://192.168.1.201/artifactory/milvus', description: 'JFROG ARTFACTORY URL', name: 'JFROG_ARTFACTORY_URL', trim: true
        string defaultValue: '1a527823-d2b7-44fd-834b-9844350baf14', description: 'JFROG CREDENTIALS ID', name: 'JFROG_CREDENTIALS_ID', trim: true
    }
    environment {
        PROJECT_NAME = "milvus"
        MILVUS_ROOT_PATH="/var/lib"
        MILVUS_INSTALL_PREFIX="${env.MILVUS_ROOT_PATH}/${env.PROJECT_NAME}"
        LOWER_BUILD_TYPE = params.BUILD_TYPE.toLowerCase()
        SEMVER = "${BRANCH_NAME.contains('/') ? BRANCH_NAME.substring(BRANCH_NAME.lastIndexOf('/') + 1) : BRANCH_NAME}"
        PIPELINE_NAME = "milvus-ci"
        HELM_BRANCH = "0.11.1"
    }
    stages {
        stage ('Milvus Build and Unittest') {
            matrix {
                axes {
                    axis {
                        name 'OS_NAME'
                        values 'centos7'
                    }
                    axis {
                        name 'CPU_ARCH'
                        values 'amd64'
                    }
                    axis {
                        name 'BINARY_VERSION'
                        values 'gpu', 'cpu'
                    }
                }
                environment {
                    PACKAGE_VERSION = VersionNumber([
                        versionNumberString : '${SEMVER}-${BINARY_VERSION}-${OS_NAME}-${CPU_ARCH}-${LOWER_BUILD_TYPE}'
                    ]);
                }
                agent {
                    kubernetes {
                        label "${OS_NAME}-${BINARY_VERSION}-build-${SEMVER}-${env.PIPELINE_NAME}-${env.BUILD_NUMBER}"
                        defaultContainer 'jnlp'
                        customWorkspace '/home/jenkins/agent/workspace'
                        yamlFile "ci/jenkins/pod/milvus-${BINARY_VERSION}-version-${OS_NAME}-build-env-pod.yaml"
                    }
                }
                stages {
                    stage('Build and Unittest') {
                        steps {
                            container("milvus-${BINARY_VERSION}-build-env") {
                                MPLModule('Milvus Build')
                                MPLModule('Unittest')
                                MPLModule('Package Build')
                            }
                        }
                    }
                }
            }
        }
        stage ('Publish Docker Images') {
            matrix {
                axes {
                    axis {
                        name 'OS_NAME'
                        values 'centos7'
                    }
                    axis {
                        name 'CPU_ARCH'
                        values 'amd64'
                    }
                    axis {
                        name 'BINARY_VERSION'
                        values 'gpu', 'cpu'
                    }
                }
                environment {
                    PACKAGE_VERSION = VersionNumber([
                        versionNumberString : '${SEMVER}-${BINARY_VERSION}-${OS_NAME}-${CPU_ARCH}-${LOWER_BUILD_TYPE}'
                    ]);
                    SOURCE_REPO = "${params.DOKCER_REGISTRY_URL}/milvus/engine"
                    TARGET_REPO = "${params.DOKCER_REGISTRY_URL}/milvus/engine"
                    SOURCE_TAG = "${CHANGE_TARGET ? CHANGE_TARGET : SEMVER}-${BINARY_VERSION}-${OS_NAME}-${LOWER_BUILD_TYPE}"
                    TARGET_TAG = "${SEMVER}-${BINARY_VERSION}-${OS_NAME}-${LOWER_BUILD_TYPE}"
                    DOCKER_BUILDKIT = 1
                }
                agent {
                    kubernetes {
                        label "${OS_NAME}-${BINARY_VERSION}-publish-${SEMVER}-${env.PIPELINE_NAME}-${env.BUILD_NUMBER}"
                        defaultContainer 'jnlp'
                        yamlFile 'ci/jenkins/pod/docker-pod.yaml'
                    }
                }
                stages {
                    stage('Publish') {
                        steps {
                            container('publish-images') {
                                MPLModule('Publish')
                            }
                        }
                    }
                }
            }
        }
        stage ('Dev Test') {
            matrix {
                axes {
                    axis {
                        name 'OS_NAME'
                        values 'centos7'
                    }

                    axis {
                        name 'CPU_ARCH'
                        values 'amd64'
                    }

                    axis {
                        name 'BINARY_VERSION'
                        values 'gpu', 'cpu'
                    }
                }
                environment {
                    DOCKER_VERSION = "${SEMVER}-${BINARY_VERSION}-${OS_NAME}-${LOWER_BUILD_TYPE}"
                    FROMAT_SEMVER = "${env.SEMVER}".replaceAll("\\.", "-").replaceAll("_", "-")
                    FORMAT_OS_NAME = "${OS_NAME}".replaceAll("\\.", "-").replaceAll("_", "-")
                    HELM_RELEASE_NAME = "${env.PIPELINE_NAME}-${env.FROMAT_SEMVER}-${env.BUILD_NUMBER}-single-${FORMAT_OS_NAME}-${BINARY_VERSION}".toLowerCase()
                    CLUSTER_HELM_RELEASE_NAME = "${env.PIPELINE_NAME}-${env.FROMAT_SEMVER}-${env.BUILD_NUMBER}-cluster-${FORMAT_OS_NAME}-${BINARY_VERSION}".toLowerCase()
                    DEV_TEST_ARTIFACTS = "_artifacts/${FORMAT_OS_NAME}/${BINARY_VERSION}"
                }
                agent {
                    kubernetes {
                        label "${OS_NAME}-${BINARY_VERSION}-dev-test-${SEMVER}-${env.PIPELINE_NAME}-${env.BUILD_NUMBER}"
                        defaultContainer 'jnlp'
                        yamlFile 'ci/jenkins/pod/testEnvironment.yaml'
                    }
                }
                stages {
                    stage('Test') {
                        steps {
                            container('milvus-test-env') {
                                MPLModule('Single Node DevTest')
                                MPLModule('Cluster DevTest')
                            }
                        }
                    }
                }
                post {
                    cleanup {
                        container('milvus-test-env') {
                            archiveArtifacts artifacts: "${env.DEV_TEST_ARTIFACTS}/**", allowEmptyArchive: true
                            MPLModule('Cleanup Single Node DevTest')
                            MPLModule('Cleanup Cluster DevTest')
                        }
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            script {
                if (isTimeTriggeredBuild()) {
                    // Send an email only if the build status has changed from green/unstable to red
                    emailext subject: '$DEFAULT_SUBJECT',
                    body: '$DEFAULT_CONTENT',
                    recipientProviders: [
                        [$class: 'DevelopersRecipientProvider'],
                        [$class: 'RequesterRecipientProvider']
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: 'dev.milvus@zilliz.com'
                }
            }
        }
    }
}

boolean isTimeTriggeredBuild() {
    return (currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause').size() != 0) ? true : false;
}
